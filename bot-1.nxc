/**
 * Bot-1
 * Avoid walls using the ultrasonic and touch sensors
 * Ultrasonic: 
 * - Stops running forward
 * - Pick a random rotation limit
 * - Pick a random turn direction (left or right)
 * - Rotate both motors at reverse directions until the rotation limit
 * - Starts running forward again
 * Bumper:
 * - Almost the same, excepts that it will do a reverse run to make some safe room before turning
 */

/**
 * preprocessing
 */
#define SONAR_MOTOR OUT_A

#define TOUCH_PORT S1
#define SOUND_PORT S2
#define LIGHT_PORT S3
#define SONAR_PORT S4

#define ACT_WALK 0
#define ACT_REV_BUMP 1
#define ACT_REV_SONAR 2

#define OFF 0
#define ON  1
#define PWR_STEP 10

/**
 * structures
 */
struct stBot {
  int  action;
  char power;
  char status;
  char nextReadDelay;
  unsigned char avoidObstacleDistance;
  int turnBackRotation;
};

struct stSensorData {
  int button;
  unsigned char distanceCm;
  unsigned int soundIntensity;
  bool touchPressed;
};

/**
 * our robot
 */
stBot bot;
stSensorData sensorData;

/**
 * Setup control variables
 */
void setup(){
  bot.action = ACT_WALK;
  bot.power = 90;
  bot.nextReadDelay = 30;         // ms
  bot.avoidObstacleDistance = 30; // cm
  bot.turnBackRotation = 720;     // degrees
  bot.status = ON;                // ON | OFF
  // sensors
  SetSensorTouch(TOUCH_PORT);
  SetSensorSound(SOUND_PORT);
  SetSensorLight(LIGHT_PORT);
  SetSensorLowspeed(SONAR_PORT);
}

task debugTask(){
  while(bot.status == ON){
    Wait(50);
    string msg = "";
    // sound intensity
    msg = FormatNum("Sound = %03d", sensorData.soundIntensity);
    TextOut(0, LCD_LINE1, msg);
    // distance
    msg = FormatNum("Distance = %03d", sensorData.distanceCm);
    TextOut(0, LCD_LINE2, msg);
    // motor power
    msg = FormatNum("Speed = %03d", bot.power);
    TextOut(0, LCD_LINE3, msg);
    // is touch pressed ?
    msg = FormatNum("Bumper = %d", sensorData.touchPressed);
    TextOut(0, LCD_LINE4, msg);
  }
}

/**
 * Tries to detect a sound, not used right now
 */
task soundTask(){
  while(bot.status == ON){
    Wait(bot.nextReadDelay);
    sensorData.soundIntensity = SensorValue(SOUND_PORT);
  }
}

/**
 * Puts the robot to walk forward
 */
task walkTask(){
  bot.action = ACT_WALK;
  //while(bot.status == ON){
    OnFwdSync(OUT_BC, bot.power, 0);
  //}
}

/**
 * Rotates both motors in reverse directions at the same time
 */
task turnBackTask(){
  bot.action = ACT_REV_SONAR;
  byte o1 = OUT_B;
  byte o2 = OUT_C;
  if(Random(10) > 5){
    o1 = OUT_C;
    o2 = OUT_B;
  }
  bot.turnBackRotation = 720 + Random(720);
  CoastEx(OUT_BC, RESET_ALL);
  OnFwd(o1, bot.power);
  OnRev(o2, bot.power);
  while(MotorRotationCount(o1) < bot.turnBackRotation) {
    // nop
  }
  CoastEx(o1, RESET_ALL);
  CoastEx(o2, RESET_ALL);
  while(abs(GetOutput(OUT_B, ActualSpeedField)) > 5 && abs(GetOutput(OUT_C, ActualSpeedField)) > 5 ){
    // nop
  }
  StartTask(walkTask);
}

/**
 * Controls the motor speed (power)
 */
task speedTask(){
  while(bot.status == ON){
    sensorData.button = getchar();
    if (sensorData.button == BTNRIGHT && bot.power < 100) {
      bot.power += PWR_STEP;
    }
    if (sensorData.button == BTNLEFT && bot.power > 0) {
      bot.power -= PWR_STEP;
    }
  }
}

/**
 * It the bot hits an obstacle, then reverse run, turn back and forward run
 */
task bumperTask(){
  while(bot.status == ON){
    sensorData.touchPressed = SensorBoolean(TOUCH_PORT);
    if (sensorData.touchPressed && bot.action == ACT_WALK) {
      bot.action = ACT_REV_BUMP;
      CoastEx(OUT_BC, RESET_ALL);
      RotateMotor(OUT_BC, bot.power, -360);
      StartTask(turnBackTask);
    }
  }
}

/**
 * If the bot detects a wall, then turn back and forward run
 */
task sonarTask(){
  while(bot.status == ON){
    Wait(bot.nextReadDelay);
    sensorData.distanceCm = SensorUS(SONAR_PORT);
    if (sensorData.distanceCm <= bot.avoidObstacleDistance && bot.action == ACT_WALK){
      StartTask(turnBackTask);
    }
  }
}

/**
 * Main task
 */
task main(){
  setup();
  Precedes(walkTask, speedTask, sonarTask, bumperTask, debugTask);
}
