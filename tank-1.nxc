/**
 * Tank-1
 * Instructs the tank to move forward avoiding obstacles
 *
 */

/**
 * preprocessing
 */
#define SONAR_MOTOR OUT_A
#define SONAR_PORT S4
#define TOUCH_PORT S1

/**
 * constants
 */
const char OFF = 0;
const char ON  = 1;

/**
 * structures
 */
struct stMotor {
  char direction;
  char power;
  char status;
  bool reverseDirection;
};

struct stSonar {
  stMotor motor;
  char nextReadDelay;
  char status;
  long scanAngle;
  unsigned char avoidObstacleDistance;
};

struct stTank {
  char power;
};

/**
 * global variables
 */
stSonar sonar;
stTank tank;

/**
 * Setup control variables
 */
void setup(){
  // matTank
  tank.power = 0;
  // sonar
  sonar.status = ON;                // ON | OFF
  sonar.nextReadDelay = 15;         // ms
  sonar.avoidObstacleDistance = 50; // cm
  sonar.scanAngle = 360;
  // sonar motor
  sonar.motor.status = ON;
  sonar.motor.direction = 1;        // 1 | -1 | 0
  sonar.motor.power = 25;           // {0, 100}
  // hardware
  SetSensorLowspeed(SONAR_PORT);
  SetSensorTouch(TOUCH_PORT);
}

/**
 * Keeps the sonar motor rotating to scan obstacles
 * It also allows the program to reverse is direction by updating sonar.motor.reverseDirection attribute
 */
task sonarMotorTask(){
  RotateMotor(SONAR_MOTOR, sonar.motor.power, sonar.scanAngle);
  while(sonar.motor.status == ON){
    RotateMotor(SONAR_MOTOR, sonar.motor.power, -2 * sonar.scanAngle);
    RotateMotor(SONAR_MOTOR, sonar.motor.power, 2 * sonar.scanAngle);
  }
}

/**
 * Avoid objects at a secure range and tries to keep the robot running
 */
task sonarTask(){
  unsigned char distanceCm; // max = 2,5 meters
  while(sonar.status == ON){
    Wait(sonar.nextReadDelay);
    distanceCm = SensorUS(SONAR_PORT);
    if (distanceCm <= sonar.avoidObstacleDistance){
      
    }
  }
}

/**
 *
 */
task tankMatTask(){
  int button;
  while(sonar.status == ON){
    button = getchar();
    if (button == BTNRIGHT && tank.power <= 75) {
      tank.power += 25;
    }
    if (button == BTNLEFT && tank.power >= 25) {
      tank.power -= 25;
    }
    OnFwdSync(OUT_BC, tank.power, 0);
  }
}

/**
 * Main task
 */
task main(){
  setup();
  Precedes(tankMatTask);
}
